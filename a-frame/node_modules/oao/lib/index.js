#!/usr/bin/env node
'use strict';

require('babel-polyfill');

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

require('./utils/initConsole');

var _status = require('./status');

var _status2 = _interopRequireDefault(_status);

var _bootstrap = require('./bootstrap');

var _bootstrap2 = _interopRequireDefault(_bootstrap);

var _clean = require('./clean');

var _clean2 = _interopRequireDefault(_clean);

var _addRemoveUpgrade = require('./addRemoveUpgrade');

var _addRemoveUpgrade2 = _interopRequireDefault(_addRemoveUpgrade);

var _outdated = require('./outdated');

var _outdated2 = _interopRequireDefault(_outdated);

var _prepublish = require('./prepublish');

var _prepublish2 = _interopRequireDefault(_prepublish);

var _publish = require('./publish');

var _publish2 = _interopRequireDefault(_publish);

var _resetAllVersions = require('./resetAllVersions');

var _resetAllVersions2 = _interopRequireDefault(_resetAllVersions);

var _all = require('./all');

var _all2 = _interopRequireDefault(_all);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */

var pkg = require('../package.json');

var DEFAULT_SRC_DIR = 'packages/*';
var DEFAULT_COPY_ATTRS = 'description,keywords,author,license,homepage,bugs,repository';
var DEFAULT_CHANGELOG = 'CHANGELOG.md';

_commander2.default.version(pkg.version);

var createCommand = function createCommand(syntax, description) {
  return _commander2.default.command(syntax).description(description).option('-s --src <glob>', 'glob pattern for sub-package paths [' + DEFAULT_SRC_DIR + ']', DEFAULT_SRC_DIR).option('-i --ignore-src <glob>', 'glob pattern for sub-package paths that should be ignored').option('-l --link <regex>', 'regex pattern for dependencies that should be linked, not installed');
};

createCommand('status', 'Show an overview of the monorepo status').action(function (cmd) {
  return (0, _status2.default)(cmd.opts());
});

createCommand('bootstrap', 'Install external dependencies and create internal links').option('--prod --production', 'skip external and internal development-only dependencies (also via NODE_ENV=production)').option('--no-lockfile', "don't read or generate a lockfile").option('--pure-lockfile', "don't generate a lockfile").option('--frozen-lockfile', "don't generate a lockfile and fail if an update is needed").option('--no-parallel', "don't run yarn install in parallel (use it to debug errors, since parallel logs may be hard to read)").action(function (cmd) {
  return (0, _bootstrap2.default)(cmd.opts());
});

createCommand('clean', 'Delete all node_modules directories from sub-packages').action(function (cmd) {
  return (0, _clean2.default)(cmd.opts());
});

createCommand('add <sub-package> <packages...>', 'Add dependencies to a sub-package').option('-D --dev', 'add to `devDependencies` instead of `dependencies`').option('-P --peer', 'add to `peerDependencies` instead of `dependencies`').option('-O --optional', 'add to `optionalDependencies` instead of `dependencies`').option('-E --exact', 'install the exact version').option('-T --tilde', 'install the most recent release with the same minor version').action(function (subpackage, deps, cmd) {
  return (0, _addRemoveUpgrade2.default)(subpackage, 'add', deps, cmd.opts());
});

createCommand('remove <sub-package> <packages...>', 'Remove dependencies from a sub-package').action(function (subpackage, deps, cmd) {
  return (0, _addRemoveUpgrade2.default)(subpackage, 'remove', deps, cmd.opts());
});

createCommand('upgrade <sub-package> [packages...]', 'Upgrade some/all dependencies of a package').option('--ignore-engines', 'disregard engines check during upgrade').action(function (subpackage, deps, cmd) {
  return (0, _addRemoveUpgrade2.default)(subpackage, 'upgrade', deps, cmd.opts());
});

createCommand('outdated', 'Check for outdated dependencies').action(function (cmd) {
  return (0, _outdated2.default)(cmd.opts());
});

createCommand('prepublish', 'Prepare for a release: validate versions, copy READMEs and package.json attrs').option('--copy-attrs <attrs>', 'copy these package.json attrs to sub-packages [' + DEFAULT_COPY_ATTRS + ']', DEFAULT_COPY_ATTRS).action(function (cmd) {
  return (0, _prepublish2.default)(cmd.opts());
});

createCommand('publish', 'Publish updated sub-packages').option('--no-master', 'allow publishing from a non-master branch').option('--no-check-uncommitted', 'skip uncommitted check').option('--no-check-unpulled', 'skip unpulled check').option('--no-confirm', 'do not ask for confirmation before publishing').option('--no-git-commit', 'skip the commit-tag-push step before publishing').option('--no-npm-publish', 'skip the npm publish step').option('--new-version <version>', 'use this version for publishing, instead of asking').option('--increment-version-by <major|minor|patch|rc|beta|alpha>', 'increment version by this, instead of asking').option('--publish-tag <tag>', 'publish with a custom tag (instead of `latest`)').option('--changelog-path <path>', 'changelog path [' + DEFAULT_CHANGELOG + ']', DEFAULT_CHANGELOG).option('--no-changelog', 'skip changelog updates').action(function (cmd) {
  return (0, _publish2.default)(cmd.opts());
});

createCommand('reset-all-versions <version>', 'Reset all versions (incl. monorepo package) to the specified one').option('--no-confirm', 'do not ask for confirmation').action(function (version, cmd) {
  (0, _resetAllVersions2.default)(version, cmd.opts());
});

createCommand('all <command>', 'Run a given command on all sub-packages').option('--parallel', 'run command in parallel on all sub-packages').option('--no-parallel-logs', 'use chronological logging, even in parallel mode').option('--ignore-errors', 'do not stop even if there are errors in some packages').action(function (command, cmd) {
  (0, _all2.default)(command, cmd.opts());
});

process.on('unhandledRejection', function (err) {
  console.error(err); // eslint-disable-line
  process.exit(1);
});
process.on('SIGINT', function () {
  process.exit(0);
});

_commander2.default.command('*', '', { noHelp: true }).action(function () {
  return _commander2.default.outputHelp();
});
if (process.argv.length <= 2) _commander2.default.outputHelp();

_commander2.default.parse(process.argv);