'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _storyboard = require('storyboard');

var _readSpecs = require('./utils/readSpecs');

var _git = require('./utils/git');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/* eslint-disable no-console */

var run = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(opts) {
    var lastTag;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            (0, _storyboard.config)({ filter: '-*' });
            _context.next = 3;
            return gitStatus();

          case 3:
            lastTag = _context.sent;
            _context.next = 6;
            return subpackageStatus(opts, lastTag);

          case 6:
            console.log('');

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function run(_x) {
    return _ref.apply(this, arguments);
  };
}();

var gitStatus = function () {
  var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
    var branch, lastTag, uncommitted, unpulled;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            console.log('');
            console.log('* Git status:');
            console.log('');
            _context2.prev = 3;
            _context2.next = 6;
            return (0, _git.gitCurBranch)();

          case 6:
            branch = _context2.sent;

            console.log('    - Current branch: ' + _storyboard.chalk.cyan.bold(branch));
            _context2.next = 13;
            break;

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2['catch'](3);

            console.log('    - ' + _storyboard.chalk.red.bold('Could not be determined') + ' (is this a git repo?)');

          case 13:
            lastTag = void 0;
            _context2.prev = 14;
            _context2.next = 17;
            return (0, _git.gitLastTag)();

          case 17:
            lastTag = _context2.sent;

            console.log('    - Last tag: ' + (lastTag != null ? _storyboard.chalk.cyan.bold(lastTag) : _storyboard.chalk.yellow.bold('NONE YET')));
            _context2.next = 23;
            break;

          case 21:
            _context2.prev = 21;
            _context2.t1 = _context2['catch'](14);

          case 23:
            _context2.prev = 23;
            _context2.next = 26;
            return (0, _git.gitUncommittedChanges)();

          case 26:
            uncommitted = _context2.sent;

            console.log('    - Uncommitted changes: ' + (uncommitted !== '' ? _storyboard.chalk.yellow.bold('YES') : _storyboard.chalk.cyan.bold('no')));
            _context2.next = 32;
            break;

          case 30:
            _context2.prev = 30;
            _context2.t2 = _context2['catch'](23);

          case 32:
            _context2.prev = 32;
            _context2.next = 35;
            return (0, _git.gitUnpulledChanges)();

          case 35:
            unpulled = _context2.sent;

            console.log('    - Unpulled changes: ' + (unpulled !== '0' ? _storyboard.chalk.yellow.bold('YES') : _storyboard.chalk.cyan.bold('no')));
            _context2.next = 42;
            break;

          case 39:
            _context2.prev = 39;
            _context2.t3 = _context2['catch'](32);

            console.log('    - Unpulled changes: ' + _storyboard.chalk.yellow.bold('UNKNOWN (no upstream?)'));

          case 42:
            return _context2.abrupt('return', lastTag);

          case 43:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[3, 10], [14, 21], [23, 30], [32, 39]]);
  }));

  return function gitStatus() {
    return _ref2.apply(this, arguments);
  };
}();

var subpackageStatus = function () {
  var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(opts, lastTag) {
    var src, ignoreSrc, allSpecs, pkgNames, i, pkgName, _allSpecs$pkgName, pkgPath, specs, name, version, isPrivate, changes, diff, dependencies, devDependencies, numDeps, numDevDeps, deps;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            src = opts.src, ignoreSrc = opts.ignoreSrc;
            _context3.next = 3;
            return (0, _readSpecs.readAllSpecs)(src, ignoreSrc);

          case 3:
            allSpecs = _context3.sent;
            pkgNames = Object.keys(allSpecs);

            console.log('');
            console.log('* Subpackage status: [' + _storyboard.chalk.cyan.bold(pkgNames.length) + ' package/s, incl. root]');
            console.log('');
            console.log(_storyboard.chalk.gray('    Name                                     Version        Private Changes Dependencies'));
            i = 0;

          case 10:
            if (!(i < pkgNames.length)) {
              _context3.next = 36;
              break;
            }

            pkgName = pkgNames[i];
            _allSpecs$pkgName = allSpecs[pkgName], pkgPath = _allSpecs$pkgName.pkgPath, specs = _allSpecs$pkgName.specs;
            name = pkgName === _readSpecs.ROOT_PACKAGE ? 'Root' : pkgName;

            name = field(name, 40);
            if (pkgName === _readSpecs.ROOT_PACKAGE) name = _storyboard.chalk.italic(name);
            version = _storyboard.chalk.cyan.bold(field(specs.version, 14));
            isPrivate = specs.private ? _storyboard.chalk.cyan.bold(field('yes', 7)) : _storyboard.chalk.yellow.bold(field('NO', 7));
            changes = void 0;

            if (!(pkgName !== _readSpecs.ROOT_PACKAGE)) {
              _context3.next = 26;
              break;
            }

            _context3.next = 22;
            return (0, _git.gitDiffSinceIn)(lastTag, pkgPath);

          case 22:
            diff = _context3.sent;

            changes = diff !== '' ? _storyboard.chalk.yellow.bold(field(String(diff.split('\n').length), 7)) : _storyboard.chalk.gray(field('-', 7));
            _context3.next = 27;
            break;

          case 26:
            changes = _storyboard.chalk.gray(field('N/A', 7));

          case 27:
            dependencies = specs.dependencies, devDependencies = specs.devDependencies;
            numDeps = Object.keys(dependencies || {}).length;
            numDevDeps = Object.keys(devDependencies || {}).length;
            deps = '' + _storyboard.chalk.cyan.bold(numDeps);

            if (numDevDeps) deps += ' (+ ' + _storyboard.chalk.cyan.bold(numDevDeps) + ' dev)';
            console.log('    ' + name + ' ' + version + ' ' + isPrivate + ' ' + changes + ' ' + deps);

          case 33:
            i++;
            _context3.next = 10;
            break;

          case 36:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function subpackageStatus(_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}();

var field = function field() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var n = arguments[1];

  if (str.length > n) return str.slice(0, n - 1) + '\u2026';
  var out = str;
  // inefficient, slow, etc. but doesn't matter in this case, and easy to read
  while (out.length < n) {
    out += ' ';
  }return out;
};

exports.default = run;