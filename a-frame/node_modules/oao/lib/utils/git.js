'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gitPushWithTags = exports.gitAddTag = exports.gitCommitChanges = exports.gitDiffSinceIn = exports.gitUnpulledChanges = exports.gitUncommittedChanges = exports.gitCurBranch = exports.gitLastTag = undefined;

var _shell = require('./shell');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var gitLastTag = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var _ref2, commit, _ref3, tag;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return (0, _shell.exec)('git rev-list --tags --max-count=1', {
              logLevel: 'trace',
              errorLogLevel: 'info'
            });

          case 3:
            _ref2 = _context.sent;
            commit = _ref2.stdout;

            commit = commit.trim();

            if (!(commit === '')) {
              _context.next = 8;
              break;
            }

            return _context.abrupt('return', null);

          case 8:
            _context.next = 10;
            return (0, _shell.exec)('git describe --tags ' + commit, {
              logLevel: 'trace'
            });

          case 10:
            _ref3 = _context.sent;
            tag = _ref3.stdout;

            tag = tag.trim();
            tag = tag !== '' ? tag : null;
            return _context.abrupt('return', tag);

          case 17:
            _context.prev = 17;
            _context.t0 = _context['catch'](0);
            return _context.abrupt('return', null);

          case 20:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 17]]);
  }));

  return function gitLastTag() {
    return _ref.apply(this, arguments);
  };
}();

var gitCurBranch = function () {
  var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
    var _ref5, stdout;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _shell.exec)('git symbolic-ref --short HEAD', {
              logLevel: 'trace'
            });

          case 2:
            _ref5 = _context2.sent;
            stdout = _ref5.stdout;
            return _context2.abrupt('return', stdout.trim());

          case 5:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function gitCurBranch() {
    return _ref4.apply(this, arguments);
  };
}();

var gitUncommittedChanges = function () {
  var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
    var _ref7, stdout;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _shell.exec)('git status --porcelain', {
              logLevel: 'trace'
            });

          case 2:
            _ref7 = _context3.sent;
            stdout = _ref7.stdout;
            return _context3.abrupt('return', stdout.trim());

          case 5:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function gitUncommittedChanges() {
    return _ref6.apply(this, arguments);
  };
}();

// Ripped off from: https://github.com/sindresorhus/np/blob/master/lib/git.js
var gitUnpulledChanges = function () {
  var _ref8 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
    var _ref9, stdout;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return (0, _shell.exec)('git rev-list --count --left-only @{u}...HEAD', {
              logLevel: 'trace'
            });

          case 2:
            _ref9 = _context4.sent;
            stdout = _ref9.stdout;
            return _context4.abrupt('return', stdout.trim());

          case 5:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function gitUnpulledChanges() {
    return _ref8.apply(this, arguments);
  };
}();

var gitDiffSinceIn = function () {
  var _ref10 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(sinceTag, inPath) {
    var _ref11, stdout;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!(sinceTag == null)) {
              _context5.next = 2;
              break;
            }

            return _context5.abrupt('return', 'CHANGED');

          case 2:
            _context5.next = 4;
            return (0, _shell.exec)('git diff --name-only ' + sinceTag + ' -- ' + inPath, {
              logLevel: 'trace'
            });

          case 4:
            _ref11 = _context5.sent;
            stdout = _ref11.stdout;
            return _context5.abrupt('return', stdout.trim());

          case 7:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function gitDiffSinceIn(_x, _x2) {
    return _ref10.apply(this, arguments);
  };
}();

var gitCommitChanges = function () {
  var _ref12 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(msg) {
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return (0, _shell.exec)('git add .', { logLevel: 'trace' });

          case 2:
            _context6.next = 4;
            return (0, _shell.exec)('git commit -m ' + msg, { logLevel: 'trace' });

          case 4:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  }));

  return function gitCommitChanges(_x3) {
    return _ref12.apply(this, arguments);
  };
}();

var gitAddTag = function () {
  var _ref13 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(tag) {
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return (0, _shell.exec)('git tag ' + tag, { logLevel: 'trace' });

          case 2:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  }));

  return function gitAddTag(_x4) {
    return _ref13.apply(this, arguments);
  };
}();

var gitPushWithTags = function () {
  var _ref14 = _asyncToGenerator(regeneratorRuntime.mark(function _callee8() {
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return (0, _shell.exec)('git push --quiet', { logLevel: 'trace' });

          case 2:
            _context8.next = 4;
            return (0, _shell.exec)('git push --tags --quiet', { logLevel: 'trace' });

          case 4:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, undefined);
  }));

  return function gitPushWithTags() {
    return _ref14.apply(this, arguments);
  };
}();

exports.gitLastTag = gitLastTag;
exports.gitCurBranch = gitCurBranch;
exports.gitUncommittedChanges = gitUncommittedChanges;
exports.gitUnpulledChanges = gitUnpulledChanges;
exports.gitDiffSinceIn = gitDiffSinceIn;
exports.gitCommitChanges = gitCommitChanges;
exports.gitAddTag = gitAddTag;
exports.gitPushWithTags = gitPushWithTags;