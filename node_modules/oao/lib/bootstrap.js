'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _storyboard = require('storyboard');

var _kebabCase = require('kebab-case');

var _kebabCase2 = _interopRequireDefault(_kebabCase);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _readSpecs = require('./utils/readSpecs');

var _removeInternalLinks2 = require('./utils/removeInternalLinks');

var _removeInternalLinks3 = _interopRequireDefault(_removeInternalLinks2);

var _writeSpecs = require('./utils/writeSpecs');

var _writeSpecs2 = _interopRequireDefault(_writeSpecs);

var _shell = require('./utils/shell');

var _promises = require('./utils/promises');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var PASS_THROUGH_OPTS = ['production', 'noLockfile', 'pureLockfile', 'frozenLockfile'];

var run = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(opts) {
    var src, ignoreSrc, linkPattern, production, allSpecs, pkgNames, allRemovedDepsByPackage, allRemovedDepsByPackageAndType, installer;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            src = opts.src, ignoreSrc = opts.ignoreSrc, linkPattern = opts.link;
            production = opts.production || process.env.NODE_ENV === 'production';
            _context5.next = 4;
            return (0, _readSpecs.readAllSpecs)(src, ignoreSrc);

          case 4:
            allSpecs = _context5.sent;
            pkgNames = Object.keys(allSpecs);
            allRemovedDepsByPackage = {};
            allRemovedDepsByPackageAndType = {};

            // Pass 0: register all subpackages (yarn link) [PARALLEL]

            _storyboard.mainStory.info(_storyboard.chalk.bold('PASS 0:') + ' registering all subpackages...');
            _context5.next = 11;
            return (0, _promises.runInParallel)(pkgNames, function () {
              var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(pkgName) {
                var _allSpecs$pkgName, displayName, pkgPath;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (!(pkgName === _readSpecs.ROOT_PACKAGE)) {
                          _context.next = 2;
                          break;
                        }

                        return _context.abrupt('return');

                      case 2:
                        _allSpecs$pkgName = allSpecs[pkgName], displayName = _allSpecs$pkgName.displayName, pkgPath = _allSpecs$pkgName.pkgPath;

                        _storyboard.mainStory.info('  - ' + _storyboard.chalk.cyan.bold(displayName));
                        _context.next = 6;
                        return (0, _shell.exec)('yarn link', {
                          cwd: pkgPath,
                          logLevel: 'trace',
                          errorLogLevel: 'info' // reduce yarn's log level (stderr) when subpackage is already registered
                        });

                      case 6:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, undefined);
              }));

              return function (_x2) {
                return _ref2.apply(this, arguments);
              };
            }());

          case 11:

            // Pass 1: install external deps for all subpackages [PARALLEL]
            _storyboard.mainStory.info(_storyboard.chalk.bold('PASS 1:') + ' installing external dependencies...');

            installer = function () {
              var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(pkgName) {
                var _allSpecs$pkgName2, displayName, pkgPath, specPath, prevSpecs, fModified, _removeInternalLinks, nextSpecs, allRemovedPackages, removedPackagesByType, cmd;

                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        // if (pkgName === ROOT_PACKAGE) return;
                        _allSpecs$pkgName2 = allSpecs[pkgName], displayName = _allSpecs$pkgName2.displayName, pkgPath = _allSpecs$pkgName2.pkgPath, specPath = _allSpecs$pkgName2.specPath, prevSpecs = _allSpecs$pkgName2.specs;

                        _storyboard.mainStory.info('  - ' + _storyboard.chalk.cyan.bold(displayName));

                        // Rewrite package.json without own/linked packages, install, and revert changes
                        fModified = false;
                        _context2.prev = 3;
                        _removeInternalLinks = (0, _removeInternalLinks3.default)(prevSpecs, pkgNames, linkPattern), nextSpecs = _removeInternalLinks.nextSpecs, allRemovedPackages = _removeInternalLinks.allRemovedPackages, removedPackagesByType = _removeInternalLinks.removedPackagesByType;

                        allRemovedDepsByPackage[pkgName] = allRemovedPackages;
                        allRemovedDepsByPackageAndType[pkgName] = removedPackagesByType;
                        if (nextSpecs !== prevSpecs) {
                          (0, _writeSpecs2.default)(specPath, nextSpecs);
                          fModified = true;
                        }
                        cmd = 'yarn install';

                        PASS_THROUGH_OPTS.forEach(function (key) {
                          if (opts[key]) cmd += ' --' + (0, _kebabCase2.default)(key);
                        });
                        _context2.next = 12;
                        return (0, _shell.exec)(cmd, { cwd: pkgPath, logLevel: 'trace' });

                      case 12:
                        _context2.prev = 12;

                        if (prevSpecs != null && fModified) (0, _writeSpecs2.default)(specPath, prevSpecs);
                        return _context2.finish(12);

                      case 15:
                      case 'end':
                        return _context2.stop();
                    }
                  }
                }, _callee2, undefined, [[3,, 12, 15]]);
              }));

              return function installer(_x3) {
                return _ref3.apply(this, arguments);
              };
            }();

            if (!opts.parallel) {
              _context5.next = 18;
              break;
            }

            _context5.next = 16;
            return (0, _promises.runInParallel)(pkgNames, installer, { waitForAllToResolve: true });

          case 16:
            _context5.next = 20;
            break;

          case 18:
            _context5.next = 20;
            return (0, _promises.runInSeries)(pkgNames, installer);

          case 20:

            // Pass 2: link internal and user-specified deps [PARALLEL]
            _storyboard.mainStory.info(_storyboard.chalk.bold('PASS 2:') + ' Installing all internal dependencies...');
            _context5.next = 23;
            return (0, _promises.runInParallel)(pkgNames, function () {
              var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(pkgName) {
                var allRemovedPackages, removedPackagesByType, packagesToLink, _allSpecs$pkgName3, displayName, pkgPath;

                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        allRemovedPackages = allRemovedDepsByPackage[pkgName];
                        removedPackagesByType = allRemovedDepsByPackageAndType[pkgName];
                        packagesToLink = Object.keys(allRemovedPackages);
                        _allSpecs$pkgName3 = allSpecs[pkgName], displayName = _allSpecs$pkgName3.displayName, pkgPath = _allSpecs$pkgName3.pkgPath;
                        _context4.next = 6;
                        return (0, _promises.runInParallel)(packagesToLink, function () {
                          var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(depName) {
                            var depVersionRange, depSpecs, depActualVersion;
                            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                              while (1) {
                                switch (_context3.prev = _context3.next) {
                                  case 0:
                                    if (!(production && isPureDevDependency(removedPackagesByType, depName))) {
                                      _context3.next = 2;
                                      break;
                                    }

                                    return _context3.abrupt('return');

                                  case 2:
                                    _storyboard.mainStory.info('  - ' + _storyboard.chalk.cyan.bold(displayName) + ' -> ' + _storyboard.chalk.cyan.bold(depName));
                                    depVersionRange = allRemovedPackages[depName];
                                    depSpecs = allSpecs[depName]; // might not exist, if it's a custom link

                                    depActualVersion = depSpecs ? depSpecs.specs.version : null;

                                    if (depActualVersion && !_semver2.default.satisfies(depActualVersion, depVersionRange)) {
                                      _storyboard.mainStory.warn('    Warning: ' + _storyboard.chalk.cyan.bold(depName + '@' + depActualVersion) + ' ' + ('does not satisfy specified range: ' + _storyboard.chalk.cyan.bold(depVersionRange)));
                                    }
                                    _context3.next = 9;
                                    return (0, _shell.exec)('yarn link ' + depName, { cwd: pkgPath, logLevel: 'trace' });

                                  case 9:
                                  case 'end':
                                    return _context3.stop();
                                }
                              }
                            }, _callee3, undefined);
                          }));

                          return function (_x5) {
                            return _ref5.apply(this, arguments);
                          };
                        }());

                      case 6:
                      case 'end':
                        return _context4.stop();
                    }
                  }
                }, _callee4, undefined);
              }));

              return function (_x4) {
                return _ref4.apply(this, arguments);
              };
            }());

          case 23:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function run(_x) {
    return _ref.apply(this, arguments);
  };
}();

var isPureDevDependency = function isPureDevDependency(deps, depName) {
  return !(deps.dependencies && deps.dependencies[depName] || deps.optionalDependencies && deps.optionalDependencies[depName] || deps.peerDependencies && deps.peerDependencies[depName]);
};

exports.default = run;