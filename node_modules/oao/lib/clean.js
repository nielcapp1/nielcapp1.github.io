'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _storyboard = require('storyboard');

var _readSpecs = require('./utils/readSpecs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var run = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(_ref2) {
    var src = _ref2.src,
        ignoreSrc = _ref2.ignoreSrc;
    var allSpecs, pkgNames;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _readSpecs.readAllSpecs)(src, ignoreSrc);

          case 2:
            allSpecs = _context.sent;
            pkgNames = Object.keys(allSpecs);
            _context.next = 6;
            return Promise.all(pkgNames.map(function (pkgName) {
              return new Promise(function (resolve, reject) {
                var pkgPath = allSpecs[pkgName].pkgPath;

                var nodeModulesPath = _path2.default.join(pkgPath, 'node_modules');
                _storyboard.mainStory.info('Removing ' + _storyboard.chalk.cyan.bold(nodeModulesPath) + '...');
                (0, _rimraf2.default)(nodeModulesPath, function (err) {
                  if (err) {
                    reject(err);
                    return;
                  }
                  resolve();
                });
              });
            }));

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function run(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = run;