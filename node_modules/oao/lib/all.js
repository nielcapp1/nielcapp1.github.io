'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _storyboard = require('storyboard');

var _storyboardListenerConsoleParallel = require('storyboard-listener-console-parallel');

var _storyboardListenerConsoleParallel2 = _interopRequireDefault(_storyboardListenerConsoleParallel);

var _listPaths = require('./utils/listPaths');

var _listPaths2 = _interopRequireDefault(_listPaths);

var _shell = require('./utils/shell');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var run = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(cmd, _ref2) {
    var src = _ref2.src,
        ignoreSrc = _ref2.ignoreSrc,
        parallel = _ref2.parallel,
        parallelLogs = _ref2.parallelLogs,
        ignoreErrors = _ref2.ignoreErrors;
    var pkgPaths, allPromises, i, promise;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (parallel && parallelLogs) {
              (0, _storyboard.removeAllListeners)();
              (0, _storyboard.addListener)(_storyboardListenerConsoleParallel2.default);
            }
            _context.next = 3;
            return (0, _listPaths2.default)(src, ignoreSrc);

          case 3:
            pkgPaths = _context.sent;
            allPromises = [];
            i = 0;

          case 6:
            if (!(i < pkgPaths.length)) {
              _context.next = 18;
              break;
            }

            promise = (0, _shell.exec)(cmd, { cwd: pkgPaths[i], bareLogs: parallelLogs });

            if (ignoreErrors) promise = promise.catch(function () {});

            if (parallel) {
              _context.next = 14;
              break;
            }

            _context.next = 12;
            return promise;

          case 12:
            _context.next = 15;
            break;

          case 14:
            allPromises.push(promise);

          case 15:
            i += 1;
            _context.next = 6;
            break;

          case 18:
            if (!(parallel && parallelLogs)) {
              _context.next = 22;
              break;
            }

            _context.next = 21;
            return Promise.all(allPromises);

          case 21:
            process.exit(0);

          case 22:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function run(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = run;