'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ROOT_PACKAGE = exports.readOneSpec = exports.readAllSpecs = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _storyboard = require('storyboard');

var _listPaths = require('./listPaths');

var _listPaths2 = _interopRequireDefault(_listPaths);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var ROOT_PACKAGE = '__ROOT_PACKAGE__';

var readAllSpecs = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(src, ignoreSrc) {
    var pkgPaths, allSpecs;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _listPaths2.default)(src, ignoreSrc);

          case 2:
            pkgPaths = _context.sent;

            pkgPaths.push('.');
            allSpecs = {};

            _storyboard.mainStory.info('Reading all package.json files...');
            pkgPaths.forEach(function (pkgPath) {
              var pkg = readOneSpec(pkgPath);
              allSpecs[pkg.name] = pkg;
            });
            return _context.abrupt('return', allSpecs);

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function readAllSpecs(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var readOneSpec = function readOneSpec(pkgPath) {
  var pkg = {};
  pkg.pkgPath = pkgPath;
  try {
    pkg.specPath = _path2.default.resolve(process.cwd(), pkgPath, 'package.json');
    pkg.specs = JSON.parse(_fs2.default.readFileSync(pkg.specPath, 'utf8'));
  } catch (err) {
    _storyboard.mainStory.error('Could not read package.json at ' + pkg.specPath);
    throw err;
  }
  var name = pkgPath === '.' ? ROOT_PACKAGE : pkg.specs.name;
  validatePkgName(pkgPath, name);
  pkg.name = name;
  var displayName = name === ROOT_PACKAGE ? 'MONOREPO ROOT' : name;
  pkg.displayName = displayName;
  return pkg;
};

var validatePkgName = function validatePkgName(pkgPath, name) {
  if (name == null || name === '') {
    throw new Error('Package has no name (' + pkgPath + ')');
  }
  if (pkgPath === '.') return;
  var segments = pkgPath.split('/');
  if (name[0] !== '@' && name !== segments[segments.length - 1]) {
    _storyboard.mainStory.error('Package name (' + name + ') does not match directory name ' + pkgPath);
    throw new Error('INVALID_DIR_NAME');
  }
};

exports.readAllSpecs = readAllSpecs;
exports.readOneSpec = readOneSpec;
exports.ROOT_PACKAGE = ROOT_PACKAGE;