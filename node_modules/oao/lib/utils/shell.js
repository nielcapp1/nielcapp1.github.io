'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exec = exports.mv = exports.cp = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _split = require('split');

var _split2 = _interopRequireDefault(_split);

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _storyboard = require('storyboard');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/* eslint-disable no-underscore-dangle */

var cp = function cp(src, dst) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$story = _ref.story,
      story = _ref$story === undefined ? _storyboard.mainStory : _ref$story;

  story.debug('Copying ' + _storyboard.chalk.cyan.bold(src) + ' -> ' + _storyboard.chalk.cyan.bold(dst) + '...');
  _shelljs2.default.cp('-rf', _path2.default.normalize(src), _path2.default.normalize(dst));
};

var mv = function mv(src, dst) {
  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref2$story = _ref2.story,
      story = _ref2$story === undefined ? _storyboard.mainStory : _ref2$story;

  story.debug('Moving ' + _storyboard.chalk.cyan.bold(src) + ' -> ' + _storyboard.chalk.cyan.bold(dst) + '...');
  _shelljs2.default.mv('-rf', _path2.default.normalize(src), _path2.default.normalize(dst));
};

var exec = function () {
  var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(cmd) {
    var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref4$story = _ref4.story,
        story = _ref4$story === undefined ? _storyboard.mainStory : _ref4$story,
        _ref4$createChildStor = _ref4.createChildStory,
        createChildStory = _ref4$createChildStor === undefined ? true : _ref4$createChildStor,
        _ref4$logLevel = _ref4.logLevel,
        logLevel = _ref4$logLevel === undefined ? 'info' : _ref4$logLevel,
        _ref4$errorLogLevel = _ref4.errorLogLevel,
        errorLogLevel = _ref4$errorLogLevel === undefined ? 'error' : _ref4$errorLogLevel,
        _ref4$bareLogs = _ref4.bareLogs,
        bareLogs = _ref4$bareLogs === undefined ? false : _ref4$bareLogs,
        cwd = _ref4.cwd;

    var title, ownStory;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            title = 'Run cmd ' + _storyboard.chalk.green.bold(cmd);

            if (cwd) title += ' at ' + _storyboard.chalk.green(cwd);
            ownStory = createChildStory ? story.child({ title: title, level: logLevel }) : story || _storyboard.mainStory;
            _context.prev = 3;
            _context.next = 6;
            return _exec(cmd, { cwd: cwd, story: ownStory, errorLogLevel: errorLogLevel, bareLogs: bareLogs });

          case 6:
            return _context.abrupt('return', _context.sent);

          case 7:
            _context.prev = 7;

            if (createChildStory) ownStory.close();
            return _context.finish(7);

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[3,, 7, 10]]);
  }));

  return function exec(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

var _exec = function () {
  var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(cmd, _ref6) {
    var cwd = _ref6.cwd,
        story = _ref6.story,
        errorLogLevel = _ref6.errorLogLevel,
        bareLogs = _ref6.bareLogs;

    var prefix, cmdName, child, _ref7, _code, _stdout, _stderr;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            prefix = bareLogs ? '' : '| ';
            cmdName = cmd.split(' ')[0].slice(0, 10);
            child = _execa2.default.shell(cmd, {
              cwd: cwd || '.',
              // Workaround for Node.js bug: https://github.com/nodejs/node/issues/10836
              // See also: https://github.com/yarnpkg/yarn/issues/2462
              stdio: process.platform === 'win32' ? ['ignore', 'pipe', 'pipe'] : undefined
            });

            child.stdout.pipe((0, _split2.default)()).on('data', function (line) {
              story.info(cmdName, '' + prefix + line);
            });
            child.stderr.pipe((0, _split2.default)()).on('data', function (line) {
              if (line) story[errorLogLevel](cmdName, '' + prefix + line);
            });
            _context2.next = 8;
            return child;

          case 8:
            _ref7 = _context2.sent;
            _code = _ref7.code;
            _stdout = _ref7.stdout;
            _stderr = _ref7.stderr;

            if (!(_code !== 0)) {
              _context2.next = 14;
              break;
            }

            throw new Error('Command returned non-zero exit code: ' + cmd + ' [' + _code + ']');

          case 14:
            return _context2.abrupt('return', { code: _code, stdout: _stdout, stderr: _stderr });

          case 17:
            _context2.prev = 17;
            _context2.t0 = _context2['catch'](0);

            story[errorLogLevel]('Command \'' + cmd + '\' failed at ' + (cwd || "'.'"), {
              attach: _context2.t0
            });
            throw new Error('Command failed: ' + cmd);

          case 21:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[0, 17]]);
  }));

  return function _exec(_x5, _x6) {
    return _ref5.apply(this, arguments);
  };
}();

exports.cp = cp;
exports.mv = mv;
exports.exec = exec;