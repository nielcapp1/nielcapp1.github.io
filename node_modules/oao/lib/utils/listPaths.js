'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _globby = require('globby');

var _globby2 = _interopRequireDefault(_globby);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var listPaths = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(src, ignoreSrc) {
    var patterns, paths;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            patterns = [src];

            if (ignoreSrc) patterns.push('!' + ignoreSrc);
            _context.next = 4;
            return (0, _globby2.default)(patterns);

          case 4:
            paths = _context.sent;
            return _context.abrupt('return', paths.filter(function (filePath) {
              try {
                return _fs2.default.statSync(_path2.default.resolve(process.cwd(), filePath)).isDirectory() && _fs2.default.existsSync(_path2.default.resolve(process.cwd(), filePath, 'package.json'));
              } catch (err) {
                return false;
              }
            }).map(function (filePath) {
              if (filePath === '/' || filePath[filePath.length - 1] !== '/') {
                return filePath;
              }
              return filePath.slice(0, -1);
            }));

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function listPaths(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = listPaths;