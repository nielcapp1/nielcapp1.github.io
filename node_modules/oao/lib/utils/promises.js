"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var runInSeries = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(items, cb) {
    var out, i;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            out = [];
            i = 0;

          case 2:
            if (!(i < items.length)) {
              _context.next = 9;
              break;
            }

            _context.next = 5;
            return cb(items[i]);

          case 5:
            out[i] = _context.sent;

          case 6:
            i++;
            _context.next = 2;
            break;

          case 9:
            return _context.abrupt("return", out);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function runInSeries(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var runInParallel = function () {
  var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(items, cb) {
    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        waitForAllToResolve = _ref3.waitForAllToResolve;

    var promises, i;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            promises = items.map(cb);
            _context2.prev = 1;
            _context2.next = 4;
            return Promise.all(promises);

          case 4:
            _context2.next = 22;
            break;

          case 6:
            _context2.prev = 6;
            _context2.t0 = _context2["catch"](1);

            if (!waitForAllToResolve) {
              _context2.next = 21;
              break;
            }

            i = 0;

          case 10:
            if (!(i < promises.length)) {
              _context2.next = 21;
              break;
            }

            _context2.prev = 11;
            _context2.next = 14;
            return promises[i];

          case 14:
            _context2.next = 18;
            break;

          case 16:
            _context2.prev = 16;
            _context2.t1 = _context2["catch"](11);

          case 18:
            i++;
            _context2.next = 10;
            break;

          case 21:
            throw _context2.t0;

          case 22:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[1, 6], [11, 16]]);
  }));

  return function runInParallel(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

exports.runInSeries = runInSeries;
exports.runInParallel = runInParallel;